/*

run ModuleControllerApplication.java
inside module ModuleController


dto
custom Exception

hash encoding
jwt, jwt filter

HttpServletRequest, HttpServletResponse


flatmap vs map:
                List<String> lstPermissions = dto.getSetRoleDto().stream()
                                .flatMap(r ->
                                        r.getSetPermissionDto()
                                                .stream()
                                                .map(PermissionDto::getName))
                                .toList();


@Query:
            @Query("from UserEnt u left join fetch u.setRoleEnt r left join fetch r.setPermissionEnt p where u.username = :username")
            Optional<UserEnt> findByUsernameIgnoreCaseQry(@Param("username") String username);

@RestController
@RequestMapping("/api/user/")
@Param , @RequestBody . @PathVariable
@PostConstruct
@Annotation(@Target,@Retention)

Authorization by using : JWT token checking filter , Filter Configuration
Authentication by using : @Annotation , @Retention , AOP(Aspect Oriented Programming)

certificate:
https SSl key certificate generation and configuration:
        # in terminal :
            keytool -genkey -alias myssl -keyalg RSA -keystore keystore.p12 -storetype PKCS12 -validity 3650 -keysize 2048
        # in application.properties :
            server.port = 443
            server.ssl.key-store = classpath:ssl/keystore.p12
            server.ssl.key-store-password = ***secret***
            server.ssl.keyStoreType = PKCS12
            server.ssl.keyAlias = myssl


Web Config to Redirect http to https : WebServerFactoryCustomizer<TomcatServletWebServerFactory>

cors(cross origin resource sharing) :

        1- hosts file modification (to assign a url to ip)
            like local DNS
            (C:\Windows\System32\drivers\etc\hosts)
            add lines :
                        127.0.0.1                   mywebsite.com
                        127.0.0.1                   sub.mywebsite.com
            now :
                        https://mywebsite.com:8080/api/product/    =   https://127.0.0.1:8080/api/product/

        2- add implementation of WebMvcConfigurer (to allow resource sharing)
            registry.allowedOrigins("http://127.0.0.1:5500") :
                    <http://127.0.0.1:5500>  is a server outside, calling the api of https://mywebsite.com:8080/api/product
            extra codes to run tests:
                    to provide another testing server
                    running on  <http://127.0.0.1:5500>
                    written in VSCODE
                    look at jsTemporarySiteForTestingCors folder
        3-to run example codes for an outside server (in folder jsTemporarySiteForTestingCors) :
            install VSCODE (visual studion code)
            extension of <live server> in vscode
            click on <go live>

*/